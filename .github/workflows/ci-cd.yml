# .github/workflows/ci-cd.yml
name: Flask CI/CD to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest
          ${{ secrets.DOCKER_USERNAME }}/my-flask-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "Starting deployment on EC2..."
          # Log in to Docker Hub on EC2
          # WARNING: Using --password via the CLI is insecure. Use --password-stdin.
          # For automation, this is often tolerated, but for higher security,
          # you'd pipe the password to stdin. For this demo, we'll keep it simple.
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          # Pull the latest image
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest

          # Stop and remove any old container instance of the app
          if sudo docker ps -a --format '{{.Names}}' | grep -q "flask-app"; then
            echo "Stopping and removing existing flask-app container..."
            sudo docker stop flask-app
            sudo docker rm flask-app
          fi

          # Run the new container
          echo "Running new flask-app container..."
          sudo docker run -d --name flask-app -p 80:5000 ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest

          echo "Deployment complete."
          sudo docker ps
