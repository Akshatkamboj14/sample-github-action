# .github/workflows/ci-cd.yml
name: Flask CI/CD to EC2

on:
  push:
    branches:
      - main # This workflow will run on every push to the 'main' branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use a GitHub-hosted Ubuntu runner
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Action to checkout your repository code

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3 # Sets up Docker Buildx for multi-platform builds

    - name: Log in to Docker Hub
      uses: docker/login-action@v3 # Action to log in to Docker Hub
      with:
        username: ${{ secrets.DOCKER_USERNAME }} # Use GitHub Secret for username
        password: ${{ secrets.DOCKER_PASSWORD }} # Use GitHub Secret for password

    - name: Build and push Docker image
      uses: docker/build-push-action@v5 # Action to build and push Docker image
      with:
        context: . # Build context is the current directory (where Dockerfile is)
        push: true # Push the image to Docker Hub
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest # Tag as 'latest'
          ${{ secrets.DOCKER_USERNAME }}/my-flask-app:${{ github.sha }} # Tag with Git SHA for versioning
        cache-from: type=gha # Use GitHub Actions cache for faster builds
        cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-and-push # This job will run ONLY after 'build-and-push' job completes successfully
    runs-on: ubuntu-latest # Use a GitHub-hosted Ubuntu runner
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.3 # Action to execute commands over SSH
      with:
        host: ${{ secrets.EC2_HOST }}        # EC2 Public IP/DNS from GitHub Secret
        username: ${{ secrets.EC2_USERNAME }} # EC2 SSH username (e.g., 'ubuntu') from GitHub Secret
        key: ${{ secrets.SSH_PRIVATE_KEY }}  # SSH Private Key from GitHub Secret
        script: | # Commands to execute on the EC2 instance
          echo "Starting deployment on EC2..."
          # Log in to Docker Hub on EC2 (optional, but good if images are private)
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          # Pull the latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest

          # Stop and remove any old container instance of the app
          if docker ps -a --format '{{.Names}}' | grep -q "flask-app"; then
            echo "Stopping and removing existing flask-app container..."
            docker stop flask-app
            docker rm flask-app
          fi

          # Run the new container
          echo "Running new flask-app container..."
          docker run -d --name flask-app -p 80:5000 ${{ secrets.DOCKER_USERNAME }}/my-flask-app:latest

          echo "Deployment complete."
          docker ps
